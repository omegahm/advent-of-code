input = <<~INPUT
....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..
INPUT

input = <<~INPUT
..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............
INPUT

input = <<~INPUT
######.##.#.###.#..##.#....#..###...#...##.#.#..##.#...#..##.#..#####.
.#.#....#.###.#....###......#..#.########.##.##..##...##.###.#.##.###.
#...###.##.#.##.#.##.#..##.#.....##.#.....#.#.#.#####.#####.#.#.....##
.###.#..##...#.#.#..#...###...#.#..###.#####..#.##....#.##.#..#...##.#
...####.#####.##..#.#...#.###..#######..###.#.#.#####.#.#..##........#
......##.##...##..#..########.....#######..#.####.#..##..##.#####..##.
##..#####..#.#..#.##..#..#..#..#####.####.#....#...##....##.###..#.#..
...#.#.####.##.###.#...#.##......###..#.####..##.#..#.#.##.#..#...###.
.#...#######.#.####.##..###....#.....#..###.#..#..#.#..####.#.#.######
......#.###.#####...........##.#..####..##.##.....###.######..##..#...
###...#.##....#.##...#.###....##.......#.#.##..#......###...###.####..
####.#.......####.####.#.########..#.#..#.#.###.######...##..##....##.
#.#.#..#...#.#...##.#####..###...........###..##..####..#.#.#######.##
###...#..#..#..#.####.###.#..####...#.#....#.....########...##...###.#
#.#...##.#.###..##..##.##....##..#.####.#.##.#.##..#.#.###.#.#.#.#.###
..#.######.##.#.#...##.###.##.#.####.##..#...#.#.##.####.#..###....#..
.##########...###....###.#.##..#.#.#..#.##..#.#...##..#.##.#..#..##.#.
..######.###..##.##.....#.#...#####.##..#.#.##....###.#.....#...#.#..#
.....###.#..##...##...#.#.#.#####....##.##.#.#....#...######.###.#....
#....#..###.#.##.##...###.#####.#....#....###.#..#.##..#.#...#.#######
##...#..###....#..#...#..###.#.##.#.##.#..###..##...##....##..##.#.#.#
#..####..#.###..#.#.#.##...#..####.#.....#..######......#########.#...
.##.###..#....###.##..#####.###.....##..#.........#......#.#..#.#.###.
##..######.###.###.#....#..##.#.#...#..##...##...##.##...#..##.#...###
.....#..#..##..#.##..#.#.#.#.##.#.#.#.###...##.#.#.#.#..#.#......####.
.#.#....#...#.##.####..#.###..#.###...#...#......###.####.###.##...#..
.#####.###.#.#..#.##..#.##..##..##....#.#.###....#.#....#..##...#.##.#
..##.##....#..#......###.###...###.#####.#...##..#####.###.##.##.#...#
##..###..#.###.###.####.##..#...##..##.#......#.##..##.#....#.#..#.#.#
##......#..#.#...#.#.##.....####...#.#...##.##....##.#.#.#.###.######.
#..##.....#.##..#.......#.#.#.##.#####..#..##.#....#....####..##.###.#
#.#.#.##.#..##.#..#.##..#........#..##.##.#..#..###.#.##..#.##.###.#..
..#.#.###...#....#.....#....#..##.#...##.##..##.##..#..#..#.#..##.####
####.#####.##.#..#...####.#..#.#...##...#..#..#.##...#.####..#####.##.
##..####..##.####.#####...###....####...##..##.#.....#.#..##.#...#..#.
#....##.###.######...#..#..##.#.#.#.#.#.#...#..#.###..#.#.##....##..##
.#.#.##.#.##...#...#.##.###.....#.#.#.#.#.#...#.#..##..#.####.#..#.###
####..##.#.#.....#.#..##.#####......#..#........######.###.######.#.##
.###.#.#..##...#.##...####.#......#..#.###..################.#.#..##.#
##.........#######...###.......#..##..#.#..#...##.#..#.###..#.###.##..
...#..#.##...######....#.#...#####...###.##.##..#..#.###.#...###.#...#
.#..#.##....#...###.###...###..###.##......#.##...#.#...##.######.#..#
##.#.##.###...#.##..#.###.....#.#..##.#.##..##...#.#######.#.######..#
##.#.###.##.#..#..##.##.##.....#.#.###...###..##....#......#.#.##..#..
#.#..#.##...#...##.##.#.#.##..##.##...#.######.##....#####.##.#.#.#...
...####....#.#.#.#.####.##.######.#####.##.###.##..###..#.###.#.#.####
#.#########...#.######.###....#.###..#....#.###.##..#...#..##...#..##.
#..####...#.#.##..#.#....##.#...###.#..##.#....#..##...#.##.##.###.##.
..##.....###......##.###...#.#..##.#.####.###.###.##....#####.###.#.#.
##.#....#.#..#.##.....#.###...#..###.####.###..#.##..#..#...#......#..
#...##..####.###...#...#...#.#.#.#.#...#.###...#.##..##.#.####...#....
#...#.#.##.##.#.##.##.##..#.#.#...#..#..####.#.####..#....##..#.#.##..
######.....#...#.##...#.###..######.#.###.#.....##...####...#.#.##..#.
####.#.##.#..###...##..###.##.##.#.####.###.##.##.##.###..##.###..#..#
.#.#...###..#.##.##...####...#....#..#.#.###..###.##.#...#..#..##..##.
.###.#.#..#.#..###..###....##.....##..#...###..##.#..#.#.#####.#....#.
.#....##...#.###.......#....#..#.#.##.###.#.#......#.##.#....###.#.#.#
######.#..######.#####...#.#.###..##..##...###.###.#.##....#...#.##..#
#.....##.#.####....###.###..##...##..#.#.##.#.#..#..###.###.###.##....
.#####..#.###.....##.##...##..#.##..##.#.##.##....#.##.#.########.####
.###..##.####..#.#..###.#...#######.###.#...##..##.....#..#.###.##...#
#.#...#.#####..#..#...##.##.#.##.###.###..#.##.#.#..#..####.##..####.#
.#..##.#..###...###.####.....#...#.#.##..##.#...###..####.#.##.##.#.##
.#.#...###......##.##..##.#.#..###..#.##....##..##..#.#...#.#####...#.
#.####.....#.#.#...#..#.#.#.###...#.#.#....#.....#.##.##.#.#.#..#..##.
#....####...###..####.#.....#######.#######.#....##.#######...#..###..
##....##..###...#.#.#.#..##....####.###.....##.##..#....##.#..#.#.##..
.......#..#.##...#.###..###..#..#..##.###.#...#..##....#.#..##.####.#.
..#.#..#.##..#..##...#....#...##.###.###...###....##....######..####.#
####.##....#.....##.#.#..####.#.###.#..####.#..##...#.#..#..#..##.###.
INPUT

def parse(input)
  elves = {}

  input.lines.each_with_index do |line, y|
    line.chars.each_with_index do |c, x|
      elves[[x, y]] = true if c == "#"
    end
  end

  elves
end

def all_neighbours_empty?(elves, x, y)
  [
    elves[[x - 1, y - 1]], elves[[    x, y - 1]], elves[[x + 1, y - 1]],
    elves[[x - 1,     y]],                        elves[[x + 1,     y]],
    elves[[x - 1, y + 1]], elves[[    x, y + 1]], elves[[x + 1, y + 1]],
  ].all?(&:nil?)
end

def go_north?(elves, x, y)
  [
    elves[[x - 1, y - 1]],
    elves[[    x, y - 1]],
    elves[[x + 1, y - 1]],
  ].all?(&:nil?)
end

def go_south?(elves, x, y)
  [
    elves[[x - 1, y + 1]],
    elves[[    x, y + 1]],
    elves[[x + 1, y + 1]],
  ].all?(&:nil?)
end

def go_west?(elves, x, y)
  [
    elves[[x - 1, y - 1]],
    elves[[x - 1,     y]],
    elves[[x - 1, y + 1]],
  ].all?(&:nil?)
end

def go_east?(elves, x, y)
  [
    elves[[x + 1, y - 1]],
    elves[[x + 1,     y]],
    elves[[x + 1, y + 1]],
  ].all?(&:nil?)
end

def visualize(elves)
  minX = elves.keys.map(&:first).min
  maxX = elves.keys.map(&:first).max
  minY = elves.keys.map(&:last).min
  maxY = elves.keys.map(&:last).max

  minY.upto(maxY) do |y|
    minX.upto(maxX) do |x|
      print elves[[x, y]] ? '#' : '.'
    end
    puts
  end
end

def count_map(elves)
  minX = elves.keys.map(&:first).min
  maxX = elves.keys.map(&:first).max
  minY = elves.keys.map(&:last).min
  maxY = elves.keys.map(&:last).max

  (maxX - minX + 1) * (maxY - minY + 1) - elves.count { |_, v| v }
end

def solve(elves, count: 10)
  directions = [
    [:north, 0, -1],
    [:south, 0,  1],
    [:west, -1,  0],
    [:east,  1,  0],
  ]

  count.times do |i|
    proposed_moves = {}

    elves.each do |(x, y), _|
      next if all_neighbours_empty?(elves, x, y)

      moved = false
      directions.each do |(direction, dx, dy)|
        if !moved && send("go_#{direction}?", elves, x, y)
          proposed_moves[[x, y]] = [x + dx, y + dy]
          moved = true
        end
      end
    end

    if proposed_moves.empty?
      puts "No more moves possible"
      puts "Round #{i+1}"
      return
    end

    proposed_moves = proposed_moves.reject { |_, v| proposed_moves.values.count(v) > 1 }

    proposed_moves.each do |(x, y), (nx, ny)|
      elves.delete([x, y])
      elves[[nx, ny]] = true
    end

    # puts "\n== End of Round #{i+1} =="
    # visualize(elves)

    directions.rotate!
  end

  puts count_map(elves)
end

puts "PART 1"
elves = parse(input)
solve(elves)

puts
puts "PART 2"
elves = parse(input)
solve(elves, count: 9999)
